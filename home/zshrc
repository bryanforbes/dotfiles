# zsh configuration: zshrc
# ============================================================================
# Load order: 3rd (sourced for INTERACTIVE shells only)
# Purpose: Interactive shell configuration (aliases, completions, keybindings, prompts)
#
# Interactive shells: Any shell where you can type commands
# This is where most customization happens - it only runs for interactive use.
#
# Startup sequence:
#   1. /etc/zshenv  (system-wide, always)
#   2. ~/.zshenv    (always; sets GLOBAL_RCS=off, blocking other /etc files)
#   3. ~/.zprofile  (if login shell OR non-login command shell at SHLVL 1)
#   4. ~/.zshrc     (if interactive shell) ← YOU ARE HERE
# ============================================================================

# Declare some key global variables
# ------------------------------------------------------------------------
typeset -gU cdpath fpath

# Setup fpath
# ------------------------------------------------------------------------
# The fpath should be initialized before trying to load plugins (with zfetch)
# or trying to initialize completions
fpath=(
    $ZCOMPDIR
    $ZFUNCDIR
    $DOTFILES/zsh/functions
    $ZPLUGDIR/zsh-users/zsh-completions/src
    $ZPLUGDIR/sindresorhus/pure
    /usr/local/share/zsh/site-functions
    /usr/share/zsh/vendor-functions
    /usr/share/zsh/vendor-completions
    $fpath
)

# Autoload all user shell functions (excluding completion functions),
# following symlinks. Completion functions are handled by compinit.
# ------------------------------------------------------------------------
() {
    setopt localoptions extendedglob

    local func_dirs=("$@")

    for dir in $func_dirs(/N); do
        for func in $dir/*(N:t); do
            if [[ $func != _* ]]; then
                autoload -Uz "$func"
            fi
        done
    done
} "$DOTFILES/zsh/functions" "$ZFUNCDIR"

# Plugin init
# ----------------------------------------------------------------------------
zfetch $ZPLUGDIR zsh-users/zsh-completions
zfetch $ZPLUGDIR zsh-users/zsh-syntax-highlighting
zfetch $ZPLUGDIR zsh-users/zsh-history-substring-search
zfetch $ZPLUGDIR zsh-users/zsh-autosuggestions
zfetch $ZPLUGDIR sindresorhus/pure
zfetch $CACHEDIR/tmux tmux-plugins/tpm

# Setup cdpath
# ------------------------------------------------------------------------
cdpath=(
    .
    $HOME
    $HOME/Projects(/N)
    $HOME/Projects/sitepen(/N)
    $cdpath
)

# Editors
# ----------------------------------------------------------------------------
if (( $+commands[nvim] )); then
    export VISUAL="$commands[nvim]"
elif (( $+commands[vim] )); then
    export VISUAL="$commands[vim]"
else
    export VISUAL="$commands[vi]"
fi

export EDITOR=$VISUAL
export SUDO_EDITOR=$VISUAL

# Turn on color for everything
# ------------------------------------------------------------------------
autoload -Uz colors && colors

# Colorize ls
if (( $+commands[dircolors] )); then
    eval "$(dircolors --sh)"
    LS_COLORS="${LS_COLORS//;90:/;92:}"  # replace base03 text with base01
else
    export LSCOLORS='exfxcxdxbxGxDxabagacad'
    export LS_COLORS='di=34:ln=35:so=32:pi=33:ex=31:bd=36;01:cd=33;01:su=31;40;07:sg=36;40;07:tw=32;40;07:ow=33;40;07:'
fi

# Completions
# ------------------------------------------------------------------------
# The completion system should be configured and enabled before sourcing
# completion plugins

# Completion directories should be added to the fpath before compinit is called

# Load and initialize the completion system, ignoring insecure directories.
# Note that fpath should be configured before calling compinit.
# (https://docs.brew.sh/Shell-Completion#configuring-completions-in-zsh)
autoload -Uz compinit
export ZCOMPFILE=$ZCACHEDIR/zcompdump

# Regenerate zcompdump file if it is missing or modified in the last 20 hours.
# The parameter expansion flags used:
# #q     treats the rest as glob qualifiers
# N      if nothing matches, return null instead of reporting an error
# mh-20  only match if the file was modified in the last 20 hours
if [[ $ZCOMPFILE(#qNmh-20) ]]; then
    # -C (skip function check) implies -i (skip security check).
    compinit -C -d "$ZCOMPFILE"
else
    compinit -i -d "$ZCOMPFILE"
    # Keep $ZCOMPFILE younger than cache time even if it isn't regenerated.
    touch "$ZCOMPFILE"
fi

# Kitty shell integration
if [[ -n "$KITTY_INSTALLATION_DIR" ]]; then
    export KITTY_SHELL_INTEGRATION="enabled"
    autoload -Uz -- "$KITTY_INSTALLATION_DIR"/shell-integration/zsh/kitty-integration
    kitty-integration
    unfunction kitty-integration
fi

# Compile the zcompfile in the background
{
    # Compile zcompdump, if modified, to increase startup speed.
    if [[ -s "$ZCOMPFILE" && (! -s "${ZCOMPFILE}.zwc" || "$ZCOMPFILE" -nt "${ZCOMPFILE}.zwc") ]]; then
        if mkdir "${ZCOMPFILE}.zwc.lock" 2>/dev/null; then
            zcompile "$ZCOMPFILE"
            rm -rf "${ZCOMPFILE}.zwc.lock" 2>/dev/null
        fi
    fi
} &!

# Docker completions
if [[ -d /Applications/Docker.app/Contents/Resources/etc ]]; then
    for f in /Applications/Docker.app/Contents/Resources/etc/*.zsh-completion; do
        dest=$ZCOMPDIR/_$f:t:r
        if [[ ! -f $dest || $f -nt $dest ]]; then
            cp $f $dest
            chmod a-x $dest
        fi
    done
    unset dest
fi

# Use caching to make completion for commands with many options usable.
zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path "${ZCACHEDIR}/zcompcache"

# Case-insensitive (all), partial-word, and then substring completion
zstyle ':completion:*' matcher-list 'm:{[:lower:][:upper:]}={[:upper:][:lower:]}' '+r:|[._-]=* r:|=*' '+l:|=* r:|=*'

# Group matches and describe
zstyle ':completion:*'              menu select
zstyle ':completion:*:matches'      group 'yes'
zstyle ':completion:*:options'      description 'yes'
zstyle ':completion:*:options'      auto-description '%d'
zstyle ':completion:*:corrections'  format ' %F{green}-- %d (errors: %e) --%f'
zstyle ':completion:*:descriptions' format ' %F{yellow}-- %d --%f'
zstyle ':completion:*:messages'     format ' %F{purple} -- %d --%f'
zstyle ':completion:*:warnings'     format ' %F{red}-- no matches found --%f'
zstyle ':completion:*:default'      list-prompt '%S%M matches%s'
zstyle ':completion:*'              format ' %F{yellow}-- %d --%f'
zstyle ':completion:*'              group-name ''
zstyle ':completion:*'              verbose yes

# Fuzzy match mistyped completions.
zstyle ':completion:*'               completer _complete _match _approximate
zstyle ':completion:*:match:*'       original only
zstyle ':completion:*:approximate:*' max-errors 1 numeric

# Increase the number of errors based on the length of the typed word. But make
# sure to cap (at 7) the max-errors to avoid hanging.
zstyle -e ':completion:*:approximate:*' max-errors 'reply=($((($#PREFIX+$#SUFFIX)/3>7?7:($#PREFIX+$#SUFFIX)/3))numeric)'

# Don't complete unavailable commands.
zstyle ':completion:*:functions' ignored-patterns '(_*|pre(cmd|exec))'

# Array completion element sorting.
zstyle ':completion:*:*:-subscript-:*' tag-order indexes parameters

# Directories
zstyle ':completion:*:default'                list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*:*:cd:*'                 tag-order local-directories directory-stack path-directories
zstyle ':completion:*:*:cd:*:directory-stack' menu yes select
zstyle ':completion:*:-tilde-:*'              group-order 'named-directories' 'path-directories' 'users' 'expand'
zstyle ':completion:*'                        squeeze-slashes true

# History
zstyle ':completion:*:history-words' stop yes
zstyle ':completion:*:history-words' remove-all-dups yes
zstyle ':completion:*:history-words' list false
zstyle ':completion:*:history-words' menu yes

# Environmental Variables
zstyle ':completion::*:(-command-|export):*' fake-parameters ${${${_comps[(I)-value-*]#*,}%%,*}:#-*-}

# Populate hostname completion
zstyle -e ':completion:*:hosts' hosts 'reply=(
    ${=${=${=${${(f)"$(cat {/etc/ssh/ssh_,~/.ssh/}known_hosts(|2)(N) 2> /dev/null)"}%%[#| ]*}//\]:[0-9]*/ }//,/ }//\[/ }
    ${=${(f)"$(cat /etc/hosts(|)(N) <<(ypcat hosts 2>/dev/null))"}%%\#*}
    ${=${${${${(@M)${(f)"$(cat ~/.ssh/config 2>/dev/null)"}:#Host *}#Host }:#*\**}:#*\?*}}
)'

# Don't complete uninteresting users...
zstyle ':completion:*:*:*:users' ignored-patterns \
    adm amanda apache avahi beaglidx bin cacti canna clamav daemon \
    dbus distcache dovecot fax ftp games gdm gkrellmd gopher \
    hacluster haldaemon halt hsqldb ident junkbust ldap lp mail \
    mailman mailnull mldonkey mysql nagios \
    named netdump news nfsnobody nobody nscd ntp nut nx openvpn \
    operator pcap postfix postgres privoxy pulse pvm quagga radvd \
    rpc rpcuser rpm shutdown squid sshd sync uucp vcsa xfs '_*'

# ... unless we really want to
zstyle '*' single-ignored show

# Ignore multiple entries
zstyle ':completion:*:(rm|kill|diff):*' ignore-line other
zstyle ':completion:*:rm:*' file-patterns '*:all-files'

# Kill
zstyle ':completion:*:*:*:*:processes'    command 'ps -u $LOGNAME -o pid,user,command -w'
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#) ([0-9a-z-]#)*=01;36=0=01'
zstyle ':completion:*:*:kill:*'           menu yes select
zstyle ':completion:*:*:kill:*'           force-list always
zstyle ':completion:*:*:kill:*'           insert-ids single

# man
zstyle ':completion:*:manuals'       separate-sections true
zstyle ':completion:*:manuals.(^1*)' insert-sections true

# SSH/SCP/RSYNC
zstyle ':completion:*:(ssh|scp|rsync):*' tag-order 'hosts:-host:host hosts:-domain:domain hosts:-ipaddr:ip\ address *'
zstyle ':completion:*:(scp|rsync):*' group-order users files all-files hosts-domain hosts-host hosts-ipaddr
zstyle ':completion:*:ssh:*' group-order users hosts-domain hosts-host users hosts-ipaddr
zstyle ':completion:*:(ssh|scp|rsync):*:hosts-host' ignored-patterns '*(.|:)*' loopback ip6-loopback localhost ip6-localhost broadcasthost
zstyle ':completion:*:(ssh|scp|rsync):*:hosts-domain' ignored-patterns '<->.<->.<->.<->' '^[-[:alnum:]]##(.[-[:alnum:]]##)##' '*@*'
zstyle ':completion:*:(ssh|scp|rsync):*:hosts-ipaddr' ignored-patterns '^(<->.<->.<->.<->|(|::)([[:xdigit:].]##:(#c,2))##(|%*))' '127.0.0.<->' '255.255.255.255' '::1' 'fe80::*'

# Key bindings
# ------------------------------------------------------------------------
# Define friendly names for keycodes
typeset -gA key_info
key_info=(
    'Control'         '\C-'
    'ControlLeft'     '\e[1;5D \e[5D \e\e[D \eOd'
    'ControlRight'    '\e[1;5C \e[5C \e\e[C \eOc'
    'ControlPageUp'   '\e[5;5~'
    'ControlPageDown' '\e[6;5~'
    'Escape'          '\e'
    'Meta'            '\M-'
    'Backspace'       "^?"
    'Delete'          "^[[3~"
    'F1'              "$terminfo[kf1]"
    'F2'              "$terminfo[kf2]"
    'F3'              "$terminfo[kf3]"
    'F4'              "$terminfo[kf4]"
    'F5'              "$terminfo[kf5]"
    'F6'              "$terminfo[kf6]"
    'F7'              "$terminfo[kf7]"
    'F8'              "$terminfo[kf8]"
    'F9'              "$terminfo[kf9]"
    'F10'             "$terminfo[kf10]"
    'F11'             "$terminfo[kf11]"
    'F12'             "$terminfo[kf12]"
    'Insert'          "$terminfo[kich1]"
    'Home'            "$terminfo[khome]"
    'PageUp'          "$terminfo[kpp]"
    'End'             "$terminfo[kend]"
    'PageDown'        "$terminfo[knp]"
    'Up'              "$terminfo[kcuu1]"
    'Left'            "$terminfo[kcub1]"
    'Down'            "$terminfo[kcud1]"
    'Right'           "$terminfo[kcuf1]"
    'BackTab'         "$terminfo[kcbt]"
)

# Set empty $key_info values to an invalid UTF-8 sequence to induce silent
# bindkey failure.
for key in "${(k)key_info[@]}"; do
    if [[ -z "$key_info[$key]" ]]; then
        key_info[$key]='�'
    fi
done

# Treat these characters as part of a word.
WORDCHARS='*?_-.[]~&;!#$%^(){}<>'

# Enables terminal application mode and updates editor information.
zle-line-init() {
    # The terminal must be in application mode when ZLE is active for $terminfo
    # values to be valid.
    if (( $+terminfo[smkx] )); then
        # Enable terminal application mode.
        echoti smkx
    fi
}
zle -N zle-line-init

# Disables terminal application mode and updates editor information.
zle-line-finish() {
    # The terminal must be in application mode when ZLE is active for $terminfo
    # values to be valid.
    if (( $+terminfo[rmkx] )); then
        # Disable terminal application mode.
        echoti rmkx
    fi
}
zle -N zle-line-finish

# Expands .... to ../..
expand-dot-to-parent-directory-path() {
    if [[ $LBUFFER = *.. ]]; then
        LBUFFER+='/..'
    else
        LBUFFER+='.'
    fi
}
zle -N expand-dot-to-parent-directory-path

# Emacs bindings
bindkey -e

for key in "$key_info[Escape]"{B,b} "${(s: :)key_info[ControlLeft]}" "${key_info[Escape]}${key_info[Left]}"
    bindkey -M emacs "$key" emacs-backward-word
for key in "$key_info[Escape]"{F,f} "${(s: :)key_info[ControlRight]}" "${key_info[Escape]}${key_info[Right]}"
    bindkey -M emacs "$key" emacs-forward-word
bindkey -M emacs "$key_info[Home]" beginning-of-line
bindkey -M emacs "$key_info[End]" end-of-line
bindkey -M emacs "$key_info[Control]F" emacs-forward-word

bindkey -M emacs "$key_info[Insert]" overwrite-mode
bindkey -M emacs "$key_info[Delete]" delete-char
bindkey -M emacs "$key_info[Backspace]" backward-delete-char

bindkey -M emacs "$key_info[Left]" backward-char
bindkey -M emacs "$key_info[Right]" forward-char

# Expand history on space.
bindkey -M emacs ' ' magic-space

# Clear screen.
bindkey -M emacs "$key_info[Control]L" clear-screen

# Expand command name to full path.
for key in "$key_info[Escape]"{E,e}
    bindkey -M emacs "$key" expand-cmd-path

bindkey -M emacs "." expand-dot-to-parent-directory-path
bindkey -M isearch . self-insert 2> /dev/null

# Aliases
# ------------------------------------------------------------------------
# Clear existing aliases
unalias -m '*'

alias make='no-coreutils make'
alias tox='no-coreutils tox'

# Reload zshrc. Undefine DIRENV_WATCHES (if it exists) so that direnv will
# reload the environment
alias refresh='source ~/.zshenv && source ~/.zprofile && source ~/.zshrc'
# alias reload='exec env -u DIRENV_WATCHES $SHELL'

# Default command options
alias cp='cp -i'
alias ln='ln -i'
alias mkdir='mkdir -p'
alias mv='mv -i'
alias rm='rm -i'
alias type='type -a'
alias fda='fd -I'

# Shortcuts
alias back='popd'
alias po='popd'

# Git shortcuts
## Branch (b)
alias gbX='git branch --delete --force'
alias gbc='git checkout -b'

## Commit (c)
alias gc='git commit --verbose'
alias gco='git checkout'

## Fetch (f)
alias gf='git fetch'
alias gfc='git clone'
alias gfcr='git clone --recurse-submodules'

## Index (i)
alias giD='git diff --no-ext-diff --cached --word-diff'
alias gia='git add'
alias gid='git diff --no-ext-diff --cached'
alias giu='git add --update'

## Merge (m)
alias gm='git merge'

## Push (p)
alias gp='git push'
alias gpo='git push --set-upstream origin "$(git-branch-current 2> /dev/null)"'
alias gpt='git push --tags'

## Rebase (r)
alias gr='git rebase'
alias gra='git rebase --abort'
alias grc='git rebase --continue'
alias gri='git rebase --interactive'
alias grs='git rebase --skip'

## Cherry pick (cp)
alias gcp='git cherry-pick'
alias gcpa='git cherry-pick --abort'
alias gcpc='git cherry-pick --continue'

## Status
alias gs='git status'

## Stash (s)
alias gst='git stash save'
alias gsp='git stash pop'

## Working Copy (w)
alias gwd='git diff --no-ext-diff'
alias gwD='git diff --no-ext-diff --word-diff'

# tmux
alias tls='tmux list-sessions'
alias tas='tmux attach -t'
alias tks='tmux kill-session -t'

# ssh
alias ssh-no-tmux='ZSH_TMUX_AUTOSTART=0 ssh'
alias ssh-tmux='ZSH_TMUX_AUTOSTART=1 ssh'

# Colorize ls
if (( $+commands[dircolors] )); then
    alias ls="${aliases[ls]:-ls} --group-directories-first --color=auto"
else
    alias ls="${aliases[ls]:-ls} --group-directories-first -G"
fi

# Colorize cat
if (( $+commands[bat] )); then
    alias cat=bat

    export BAT_THEME="Solarized (dark)"
fi

# Other ls aliases
alias l='ls -1A'         # Lists in one column, hidden files
alias la='ll -A'         # Lists human readable sizes, hidden files
alias ll='ls -lh'        # Lists human readable sizes
alias lld='ll -d'        # List directories

# Let node use local readline setup (vi mode)
if (( $+commands[rlwrap] )); then
    alias node='env NODE_NO_READLINE=1 rlwrap node'
fi

# Disable correction for some commands
alias cd="nocorrect ${aliases[cd]:-cd}"
alias cp="nocorrect ${aliases[cp]:-cp}"
alias gcc="nocorrect ${aliases[gcc]:-gcc}"
alias grep="nocorrect ${aliases[grep]:-grep}"
alias gulp="nocorrect ${aliases[gulp]:-gulp}"
alias ln="nocorrect ${aliases[ln]:-ln}"
alias man="nocorrect ${aliases[man]:-man}"
alias mkdir="nocorrect ${aliases[mkdir]:-mkdir}"
alias mv="nocorrect ${aliases[mv]:-mv}"
alias rm="nocorrect ${aliases[rm]:-rm}"
alias nvim="nocorrect ${aliases[nvim]:-nvim}"
alias vi="nocorrect ${aliases[vi]:-vi}"
alias vim="nocorrect ${aliases[vim]:-vim}"
alias tsd="nocorrect ${aliases[tsd]:-tsd}"
alias ack="nocorrect ${aliases[ack]:-ack}"

# Disable globbing for some commands
alias bower="noglob ${aliases[bower]:-bower}"
alias find="noglob ${aliases[find]:-find}"
alias ftp="noglob ${aliases[ftp]:-ftp}"
alias history="noglob ${aliases[history]:-history}"
alias rsync="noglob ${aliases[rsync]:-rsync}"
alias scp="noglob ${aliases[scp]:-scp}"
alias sftp="noglob ${aliases[sftp]:-sftp}"

# Grep
export GREP_COLOR='37;45'           # BSD
export GREP_COLORS="mt=$GREP_COLOR" # GNU
alias grep="${aliases[grep]:-grep} --color=auto"

# Resource Usage
alias df='df -kh'
alias du='du -kh'
alias duh='du -kh *(D) | sort -h'

# Shell options
# ------------------------------------------------------------------------
# Navigation
setopt   AUTO_CD                # Change to a directory without typing cd
# setopt   AUTO_NAME_DIRS         # Auto add variable-stored paths to ~ list
setopt   AUTO_PUSHD             # Push the old directory onto the stack on cd
setopt   CDABLE_VARS            # Change directory to a path stored in a variable
setopt   EXTENDED_GLOB          # Use extended globbing syntax
setopt   MULTIOS                # Write to multiple descriptors
setopt   PUSHD_IGNORE_DUPS      # Do not store duplicates in the stack
setopt   PUSHD_SILENT           # Do not print the directory stack after pushd or popd
setopt   PUSHD_TO_HOME          # Push to home directory when no argument is given
unsetopt CLOBBER                # Don't overwrite existing files with > and >>

# Files and commands
# setopt   BRACE_CCL              # Allow brace character class list expansion
setopt   COMBINING_CHARS        # Combine zero-length punctuation characters (accents) with the base character
setopt   CORRECT                # Correct mis-typed commands
setopt   INTERACTIVE_COMMENTS   # Enable comments in interactive shell.
setopt   RC_QUOTES              # Allow 'Henry''s Garage' instead of 'Henry'\''s Garage'

# Jobs
setopt   AUTO_RESUME            # Attempt to resume existing job before creating a new process
setopt   LONG_LIST_JOBS         # List jobs in the long format by default
setopt   NOTIFY                 # Report status of background jobs immediately
unsetopt BG_NICE                # Don't run all background jobs at a lower priority
unsetopt CHECK_JOBS             # Don't report on jobs when shell exit
unsetopt HUP                    # Don't kill jobs on shell exit

# History
setopt   BANG_HIST              # Treat the '!' character specially during expansion
setopt   EXTENDED_HISTORY       # Write the history file in the ':start:elapsed;command' format.
setopt   HIST_BEEP              # Beep when accessing non-existent history
setopt   HIST_EXPIRE_DUPS_FIRST # Expire a duplicate event first when trimming history
setopt   HIST_FIND_NO_DUPS      # Do not display a previously found event
setopt   HIST_IGNORE_ALL_DUPS   # Delete an old recorded event if a new event is a duplicate
setopt   HIST_IGNORE_DUPS       # Do not record an event that was just recorded again
setopt   HIST_IGNORE_SPACE      # Do not record an event starting with a space
setopt   HIST_SAVE_NO_DUPS      # Do not write a duplicate event to the history file
setopt   HIST_VERIFY            # Do not execute immediately upon history expansion
setopt   SHARE_HISTORY          # Share history between all sessions

# Completion
setopt   ALWAYS_TO_END          # Move cursor to the end of a completed word
setopt   AUTO_LIST              # Automatically list choices on ambiguous completion
setopt   AUTO_PARAM_SLASH       # If completed parameter is a directory, add a trailing slash
setopt   COMPLETE_IN_WORD       # Complete from both ends of a word
setopt   PATH_DIRS              # Perform path search even on command names with slashes
unsetopt CASE_GLOB              # Make globbing case insensitive
unsetopt FLOW_CONTROL           # Disable start/stop characters in shell editor

# Don't show a % for partial lines
export PROMPT_EOL_MARK=''

# Get into vim command mode faster when hitting ESC
export KEYTIMEOUT=1

# History
# ------------------------------------------------------------------------
HISTFILE="$ZCACHEDIR/zhistory"  # The path to the history file
HISTSIZE=10000                # The maximum number of events to save in the internal history
SAVEHIST=10000                # The maximum number of events to save in the history file

# Lists the ten most used commands.
alias history-stat="history 0 | awk '{print \$2}' | sort | uniq -c | sort -n -r | head"

# Less
# ----------------------------------------------------------------------------
export LESS='-F -g -i -M -R -S -w -X -z-4'
export PAGER='less'

# fzf
# ------------------------------------------------------------------------
if (( ${+commands[fzf]} )); then
    export FZF_PATH=${commands[fzf]:A:h:h}


    # Make FZF respond more quickly when hitting escape
    # https://github.com/junegunn/fzf.vim/issues/248
    export ESCDELAY=10

    # Use -1 for the bg color to specify 'none'
    export FZF_DEFAULT_OPTS='
        --color fg:10,bg:-1,hl:4,fg+:7,bg+:0,hl+:4
        --color info:3,prompt:3,pointer:15,marker:15,spinner:3
        --color preview-fg:-1
    '
fi

# ack
# ------------------------------------------------------------------------

# On Ubuntu, ack is installed as ack-grep
if (( ${+commands[ack-grep]} )); then
    alias ack=ack-grep
fi


# ripgrep
# ------------------------------------------------------------------------

if (( ${+commands[rg]} )); then
    export RIPGREP_CONFIG_PATH=$HOME/.config/ripgrep/ripgreprc
fi

# mise
# ------------------------------------------------------------------------

if (( ${+commands[mise]} )); then
    cache_file="${ZCACHEDIR}/shellenv/mise.zsh"

    if [[ "$commands[mise]:A" -nt "$cache_file" || ! -s "$cache_file" ]]; then
        mkdir -p "$cache_file:h"
        # Cache the result.
        mise activate zsh >! "$cache_file" 2> /dev/null
    fi

    source "$cache_file"
    unset cache_file
fi

# mosh
# ------------------------------------------------------------------------
if (( ${+commands[mosh]} )); then
    # Allow ssh hostname completions to work for mosh
    compdef mosh=ssh
fi

# Line editor
# ------------------------------------------------------------------------
# Syntax highlighting
# ------------------------------------------------------------------------
# This should be near the end (preferably at the end) of the zshrc
# https://github.com/zsh-users/zsh-syntax-highlighting
ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets pattern cursor)
source $ZPLUGDIR/zsh-users/zsh-syntax-highlighting/zsh-syntax-highlighting.plugin.zsh
ZSH_HIGHLIGHT_STYLES[comment]='fg=10' # base01

# History substring search -- load this after zsh-syntax-highlighting
# https://github.com/zsh-users/zsh-history-substring-search
HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_FOUND='bg=magenta,fg=white,bold'
HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_NOT_FOUND='bg=red,fg=white,bold'
HISTORY_SUBSTRING_SEARCH_GLOBBING_FLAGS='i'
source $ZPLUGDIR/zsh-users/zsh-history-substring-search/zsh-history-substring-search.zsh

# autosuggest -- load this after zsh-syntax-highlighting and
# zsh-autosuggestions (https://github.com/zsh-users/zsh-autosuggestions)

# Use a solarized-friendly color
export ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=15' #base3
export ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE=20

source $ZPLUGDIR/zsh-users/zsh-autosuggestions/zsh-autosuggestions.zsh

# History substring keybinds
# Emacs
bindkey -M emacs "$key_info[Control]P" history-substring-search-up
bindkey -M emacs "$key_info[Control]N" history-substring-search-down
bindkey -M emacs "$key_info[Up]" history-substring-search-up
bindkey -M emacs "$key_info[Down]" history-substring-search-down
bindkey -M emacs "$key_info[Control]R" history-incremental-pattern-search-backward
bindkey -M emacs "$key_info[Control]S" history-incremental-pattern-search-forward

# Vi
bindkey -M vicmd "k" history-substring-search-up
bindkey -M vicmd "j" history-substring-search-down
bindkey -M viins "$key_info[Up]" history-substring-search-up
bindkey -M viins "$key_info[Down]" history-substring-search-down

# Configure autosuggest to work properly with history substring search;
# without this, trying to history-substring-search with an empty line will
# hang zsh
# ZSH_AUTOSUGGEST_CLEAR_WIDGETS=("${(@)ZSH_AUTOSUGGEST_CLEAR_WIDGETS:#(up|down)-line-or-history}")
# ZSH_AUTOSUGGEST_CLEAR_WIDGETS+=(history-substring-search-up history-substring-search-down)

# Prompt
# --------------------------------------------------------------------------
autoload -U promptinit; promptinit
prompt pure

# tmux
# --------------------------------------------------------------------------
_zsh_tmux_update_environment_preexec() {
    # Filter out PATH updates to avoid conflicts with mise
    eval "$(tmux show-environment -s | sed '/^export PATH=/d; /^PATH=/d')"
}

if (( ${+commands[tmux]} )); then
    if [[ "$ZSH_TMUX_AUTOSTART" == "1" && -z "$TMUX" && -z "$VIM" && -z "$EMACS" && -z "$INSIDE_EMACS" && "$TERM_PROGRAM" != "vscode" ]]; then
        export ZSH_TMUX_AUTOSTARTED=1

        tmux start-server

        if ! tmux has-session 2> /dev/null; then
            tmux new-session -d -s default \; set-option -t default destroy-unattached off &> /dev/null
        fi

        # Attach to the last session used. (detach first)
        exec tmux attach-session -d
    fi

    if [[ -n "$TMUX" ]]; then
        autoload -U add-zsh-hook
        add-zsh-hook preexec _zsh_tmux_update_environment_preexec
    fi

    unset ZSH_TMUX_AUTOSTART
fi

# Local config
# --------------------------------------------------------------------------
[[ -f ~/.config/zsh/zshrc ]] && source ~/.config/zsh/zshrc
