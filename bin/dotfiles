#!/usr/bin/env zsh

autoload colors; colors

dotfiles=$HOME/.dotfiles
configdir=$HOME/.config
cachedir=$HOME/.cache
datadir=$HOME/.local/share

if [[ "$OSTYPE" == darwin* ]]; then
    homebrew_base=/usr/local
else
    homebrew_base=/home/linuxbrew/.linuxbrew
fi

# Log output
function log {
    msg=$1
    echo "$fg_bold[green]>>>$reset_color $fg_bold[white]$msg$reset_color"
}

# Log output
function logSub {
    msg=$1
    echo "$fg_bold[blue]>>>$reset_color $fg_bold[white]$msg$reset_color"
}

# Log error output
function err {
    msg=$1
    echo "$fg_bold[red]>>>$reset_color $fg_bold[white]$msg$reset_color"
}

# Create a directory
function makedir {
    if [[ ! -d $1 ]]; then
        mkdir -p $1
        logSub "Created $1/"
    fi
}

# Create a symlink
function link {
    if [[ ! -r $2 ]]; then
        ln -s $1 $2
        logSub "Linked $1 -> $2"
    fi
}

# Fix terminal config
function fixterm {
    if [[ $TERM == "xterm-kitty" && $(uname -s) == "Darwin" && ! -d $HOME/.terminfo/78/xterm-kitty ]]; then
        local tmpfile=$(mktemp /tmp/dotfiles.XXXXXX)
        infocmp xterm-kitty > $tmpfile
        tic -x -o $HOME/.terminfo $tmpfile &> /dev/null
        rm $tmpfile
    fi

    # Fix terminal definition so C-H works properly in neovim
    kbs=$(infocmp $TERM | grep -o 'kbs=[^,]\+')
    if [[ $kbs =~ "kbs=^[hH]" ]]; then
        logSub "Fixing backspace code in terminfo..."
        infocmp $TERM | sed 's/kbs=^[hH]/kbs=\\177/' > /tmp/$TERM.ti
        tic /tmp/$TERM.ti
        rm /tmp/$TERM.ti
    fi
}

# Rebuild bat cache
function dotfiles-bat {
    log "Rebuilding bat cache..."
    bat cache --build
}

# Link dotfiles into $HOME and $configdir, update terminfo
function dotfiles-home {
    log "Updating home directory files..."

    for file in $HOME/.[a-z]*(@) $configdir/[a-zA-Z]*(@); do
        if [[ ! -e $file ]]; then
            rm $file
            logSub "Removed invalid link $file"
        fi
    done

    for file in $dotfiles/home/*(.); do
        link $file $HOME/.$file:t
    done

    for file in $dotfiles/config/*(.,/); do
        link $file $configdir/$file:t
    done

    makedir $cachedir/tmux
    makedir $cachedir/vim/sessions
    makedir $cachedir/vim/swap
    makedir $cachedir/vim/backup
    makedir $cachedir/vim/undo
    makedir $cachedir/zsh/completions
    makedir $cachedir/zsh/plugins
    makedir $datadir/zsh/functions
    makedir $datadir/direnv/allow

    makedir $configdir
    link $dotfiles/vim $configdir/nvim

    link $dotfiles/vim $HOME/.vim

    # Fix the terminal definition so that C-H works properly in neovim. This
    # function may also need to be run for the tmux terminal type.
    fixterm
}

function dotfiles-brew {
    log "Updating brew packages..."

    logSub "Checking for missing brew packages..."
    brew bundle check --file=$dotfiles/Brewfile &> /dev/null

    if (( $? )); then
        brew bundle install --file=$dotfiles/Brewfile
    fi

    logSub "Updating installed brew packages..."
    brew upgrade

    # Remove git's included zsh completions in favor of the system completions
    if [[ -f $homebrew_base/share/zsh/site-functions/_git ]]; then
        rm -f $homebrew_base/share/zsh/site-functions/_git
    fi
}

# Update Mac App Store apps
function dotfiles-mas {
    logSub "Updating installed App Store apps..."
    mas upgrade
}

# Update zsh plugins
function dotfiles-zsh {
    log "Updating zsh plugins..."

    if [[ -z $ZPLUGDIR ]]; then
        err "ZPLUGDIR not defined"
        return
    fi

    cd $ZPLUGDIR
    for org in *; do
        cd $org
        for plugin in *; do
            cd $plugin
            head=$(git rev-parse HEAD)
            git pull -q --recurse-submodules
            git submodule update --remote
            if [[ $(git rev-parse HEAD) != $head ]]; then
                logSub "Updated $org/$plugin"
            fi
            cd ..
        done
        cd ..
    done
}

# Update user python2 and python3 packages
function dotfiles-python {
    log "Updating python packages..."
    if hash pip3; then
        pip3 install --upgrade pip setuptools > /dev/null
        pip3 install --upgrade --user pynvim neovim-remote > /dev/null
        logSub "Updated Python 3 packages"
    fi

    if [[ ! -d $HOME/.poetry ]]; then
        log "Installing poetry..."
        curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python3 -
    else
        log "Updating poetry..."
        $HOME/.poetry/bin/poetry self update
    fi

    log "Updating poetry completions..."
    $HOME/.poetry/bin/poetry completions zsh > $cachedir/zsh/completions/_poetry
}

# Update global npm packages
function dotfiles-node {
    local node_path=$1
    if [[ -z $node_path ]]; then
        log "Updating global node packages..."
        node_path=$homebrew_base/bin
    fi

    # if a node_path was provided, the function was called from another
    # function, so don't print the top-level message
    if [[ ! -x $node_path/npm ]]; then
        err "No npm executable"
        return
    fi

    # get list of outdated global packages
    local mods=($($node_path/npm --registry=https://registry.npmjs.org outdated -g --parseable))
    for mod in $mods; do
        # extract current and latest fields
        array=(${(@s/:/)mod})
        currentPkg=$array[3]
        latestPkg=$array[4]

        # extract current and latest versions, minus any prerelease tags
        currentVerParts=(${(@s/@/)currentPkg})
        currentVer=$currentVerParts[2]
        latestVerParts=(${(@s/@/)latestPkg})
        latestVer=$latestVerParts[2]

        if [[ $latestVer == 'linked' ]]; then
            logSub "Skipping $latestPkg"
            continue
        fi

        # read versions into arrays
        current=(${(@s/./)currentVer})
        latest=(${(@s/./)latestVer})

        # if latest is newer than current, install latest
        if (( latest[1] > current[1] )) || {
            (( latest[1] == current[1] )) &&
            (( latest[2] > current[2] )) || {
            (( latest[1] == current[1] )) &&
            (( latest[2] == current[2] )) &&
            (( latest[3] > current[3] ));
                    };
                }; then
            $node_path/npm install --registry=https://registry.npmjs.org --progress=false -g $latestPkg > /dev/null
            logSub "Installed $latestPkg"
        fi
    done
}

# Update tmux plugins
function dotfiles-tmux {
    log "Updating tmux plugins..."

    if [[ -z $TMUX_PLUGIN_MANAGER_PATH ]]; then
        err "TMUX_PLUGIN_MANAGER_PATH not defined"
        return
    fi

    $TMUX_PLUGIN_MANAGER_PATH/tpm/bin/install_plugins > /dev/null 2>&1

    cd $TMUX_PLUGIN_MANAGER_PATH
    for plugin in *; do
        cd $plugin 
        head=$(git rev-parse HEAD)
        git pull -q --recurse-submodules
        git submodule update --remote -q
        if [[ $(git rev-parse HEAD) != $head ]]; then 
            logSub "Updated $plugin"
        fi
        cd ..
    done
}

# Update asdf plugins
function dotfiles-asdf {
    log "Updating asdf..."

    local asdf_plugins=(${(@f)$(asdf plugin-list)})
    if (( ! $asdf_plugins[(Ie)direnv] )); then
        asdf plugin-add direnv
        logSub "Installed asdf-direnv"
    fi

    makedir $HOME/.asdf/installs/direnv/system/env
    makedir $HOME/.asdf/installs/direnv/system/bin
    link $homebrew_base/bin/direnv $HOME/.asdf/installs/direnv/system/bin/direnv

    if (( ! $asdf_plugins[(Ie)nodejs] )); then
        asdf plugin-add nodejs
        bash ~/.asdf/plugins/nodejs/bin/import-release-team-keyring
        logSub "Installed asdf-nodejs"
    fi
    if (( ! $asdf_plugins[(Ie)python] )); then
        asdf plugin-add python
        logSub "Installed asdf-python"
    fi
    # neovim uses node 10 to support at least coc-sh
    if [[ -n $VIM_NODE_VERSION ]] && [[ ! -d $HOME/.asdf/installs/nodejs/$VIM_NODE_VERSION ]]; then
        asdf install nodejs $VIM_NODE_VERSION
        logSub "Installed nodejs $VIM_NODE_VERSION"
    fi

    asdf plugin-update --all
}

# Update vim plugins
function dotfiles-vim {
    log "Updating vim plugins..."

    local node_path=$homebrew_base/bin
    if [[ -n $VIM_NODE_VERSION ]]; then
        node_path=$HOME/.asdf/installs/nodejs/$VIM_NODE_VERSION/bin
        log "Updating vim's node packages..."
        dotfiles-node $node_path
    fi

    if [[ -a $HOME/.vim/autoload/plug.vim ]]; then
        cd $HOME/.vim/autoload
        existing=$(<plug.vim)
        current=$(curl -s https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim)
        if [[ -z "$current" ]]; then
            err "Problem updating plug.vim"
        elif [[ "$existing" != "$current" ]]; then
            mv plug.vim plug.old
            echo -E "$current" > plug.vim
            logSub "Updated vim-plug"
        fi

        cd $cachedir/vim/plugins
        for plugin in *; do
            cd $plugin
            head=$(git rev-parse HEAD)
            git pull -q --recurse-submodules
            if (( $? != 0 )); then
                err "Problem updating $plugin"
            else
                # If the current head is different than the original head,
                # check for a package.json
                if [[ $(git rev-parse HEAD) != $head ]]; then
                    if [[ -e package.json ]]; then
                        if [[ -e yarn.lock ]]; then
                            $node_path/yarn install --registry=https://registry.npmjs.org --frozen-lockfile --silent
                        else
                            $node_path/npm install --registry=https://registry.npmjs.org --silent
                        fi
                    fi
                    logSub "Updated $plugin"
                fi
            fi
            cd ..
        done
    fi
}

cd $HOME

if [[ -n $1 ]]; then
    dotfiles-$1
else
    dotfiles-home
    dotfiles-brew

    if (( $+commands[mas] )); then
        dotfiles-mas
    fi

    dotfiles-zsh
    dotfiles-asdf
    dotfiles-python
    dotfiles-node
    dotfiles-tmux
    dotfiles-vim
    dotfiles-bat
fi

log "Done"
