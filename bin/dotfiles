#!/usr/bin/env zsh

source $HOME/.dotfiles/zsh/common.zsh
source $HOME/.dotfiles/zsh/utilities.zsh

function generate_terminfo {
    local term_name="$1"

    infocmp "$term_name" &> /dev/null

    if (( $? != 0 )); then
        local tmpfile=$(mktemp /tmp/dotfiles.XXXXXX)

        # Fix so C-H will work in neovim
        $HOMEBREW_BASE/opt/ncurses/bin/infocmp $term_name | sed -e 's/kbs=^[hH]/kbs=\\177/' > $tmpfile

        if is-darwin; then
            # Fix for ncurses 5.7 (https://github.com/tmux/tmux/issues/2262#issuecomment-819569654)
            sed -i -e 's/pairs#0x10000/pairs#0x1000/' -e 's/pairs#65536/pairs#32768/' $tmpfile
        fi

        $HOMEBREW_BASE/opt/ncurses/bin/tic -x -o $HOME/.terminfo $tmpfile &> /dev/null

        rm $tmpfile
    fi
}

# Fix terminal config
function fixterm {
    generate_terminfo "tmux-256color"
    generate_terminfo "tmux"
}

# Rebuild bat cache
function dotfiles-bat {
    log "Rebuilding bat cache..."
    bat cache --build 2>&1 > /dev/null
}

# Link dotfiles into $HOME and $CONFIGDIR, update terminfo
function dotfiles-home {
    log "Updating home directory files..."

    makedir $CONFIGDIR

    for file in $HOME/.[a-z]*(@,N) $CONFIGDIR/[a-zA-Z]*(@,N); do
        if [[ ! -e $file ]]; then
            rm $file
            logSub "Removed invalid link $file"
        fi
    done

    for file in $DOTFILES/home/*(.); do
        link $file $HOME/.$file:t
    done

    for file in $DOTFILES/config/*(.,/); do
        link $file $CONFIGDIR/$file:t
    done

    link $DOTFILES/tmux $HOME/.tmux

    if is-darwin; then
        link $DOTFILES/hammerspoon $HOME/.hammerspoon
    fi

    makedir $CACHEDIR/tmux
    makedir $DATADIR/nvim/sessions
    makedir $DATADIR/nvim/swap
    makedir $DATADIR/nvim/backup
    makedir $DATADIR/nvim/undo
    makedir $ZCOMPDIR
    makedir $ZPLUGDIR
    makedir $ZFUNCDIR
    makedir $DATADIR/direnv/allow

    # Fix the terminal definition so that C-H works properly in neovim. This
    # function may also need to be run for the tmux terminal type.
    fixterm
}

function dotfiles-brew {
    if [[ ! -w $HOMEBREW_BASE/bin ]]; then
        log "Skipping homebrew update (no write permissions)"
        return
    fi

    log "Updating brew packages..."

    logSub "Checking for missing brew taps..."

    local -U brew_taps
    local -U tapped_taps

    brew_taps=(
        'homebrew/cask-fonts'   # fonts
    )
    tapped_taps=("${(@f)$(brew tap)}")

    for tap in $brew_taps; do
        if ((! $tapped_taps[(Ie)$tap])); then
            brew tap $tap
        fi
    done

    logSub "Checking for missing brew packages..."

    local -U brew_packages
    local -A brew_packages_args

    brew_packages=(
        'bat'                               # better cat
        'fzf'                               # fuzzy finder
        'git'                               # update from system stock git
        'mise'                              # mise environment manager
        'mosh'                              # remote terminal application that allows roaming
        'neovim'                            # better vim
        'node'                              # NodeJS
        "python@${HOMEBREW_PYTHON_VERSION}" # update from stock Python
        'ripgrep'                           # better grep
        'tmux'                              # terminal multiplexer
        'zsh'                               # newer zsh
    )

    # brew_packages_args[mosh]='--HEAD'

    if is-darwin; then
        brew_packages=(
            $brew_packages
            'coreutils'           # GNU coreutils
            'blueutil'            # bluetooth CLI
            'gnu-sed'             # GNU sed
            'gnu-tar'             # GNU tar
            'gnupg'               # update from stock gnupg
            'mas'                 # App Store CLI
            'font-iosevka'        # iosevka font
            'font-hack-nerd-font' # hack font with glyphs
            'sf-symbols'          # UI fonts from Apple
            'kitty'               # GPU based terminal emulator
            'hammerspoon'         # OS X automation via lua
        )
    fi

    local installed_packages=("${(@f)$(brew list -1)}")

    for pkg in $brew_packages; do
        if ((! $installed_packages[(Ie)$pkg])); then
            logSub "Installing $pkg..."
            brew install $pkg ${(z)${brew_packages_args[$pkg]:-''}}
        fi
    done

    logSub "Updating installed brew packages..."
    brew upgrade

    # Remove git's included zsh completions in favor of the system completions
    if [[ -f $HOMEBREW_BASE/share/zsh/site-functions/_git ]]; then
        rm -f $HOMEBREW_BASE/share/zsh/site-functions/_git
    fi

    # Update mise zsh completions
    if (( $+commands[mise] )); then
        mise completions zsh >! $ZFUNCDIR/_mise
    fi
}

# Update Mac App Store apps
function dotfiles-mas {
    logSub "Updating installed App Store apps..."
    mas upgrade
}

# Update zsh plugins
function dotfiles-zsh {
    log "Updating zsh plugins..."

    if [[ -z $ZPLUGDIR ]]; then
        err "ZPLUGDIR not defined"
        return
    fi

    cd $ZPLUGDIR
    for org in *; do
        cd $org
        for plugin in *; do
            cd $plugin
            head=$(git rev-parse HEAD)
            git pull -q --recurse-submodules
            git submodule update --remote
            if [[ $(git rev-parse HEAD) != $head ]]; then
                logSub "Updated $org/$plugin"
            fi
            cd ..
        done
        cd ..
    done
}

# Update user python2 and python3 packages
function dotfiles-python {
    if [[ ! -w $HOMEBREW_BASE/bin ]]; then
        log "Skipping python update (no write permissions)"
        return
    fi

    local python_path="${HOMEBREW_BASE}/opt/python@${HOMEBREW_PYTHON_VERSION}/libexec"

    # if [[ ! -e $HOMEBREW_BASE/bin/python ]] && [[ -e $HOMEBREW_BASE/bin/python3 ]]; then
    #     logSub "Creating python link..."
    #     link $HOMEBREW_BASE/bin/python3 $HOMEBREW_BASE/bin/python
    # fi

    log "Updating python packages..."
    if [[ -f $python_path/bin/pip3 ]]; then
        $python_path/bin/pip3 install --upgrade pip setuptools > /dev/null
        $python_path/bin/pip3 install --upgrade --user pynvim neovim-remote > /dev/null
        logSub "Updated Python 3 packages"
    fi

    local python_user_base="$($python_path/bin/python3 -c 'import site; print(site.USER_BASE, end="")')"

    if [[ ! -e "$python_user_base/bin/poetry" ]]; then
        log "Installing poetry..."
        curl -sSL https://install.python-poetry.org | $python_path/bin/python3 -
    else
        log "Updating poetry..."
        $python_user_base/bin/poetry self update
    fi

    log "Updating poetry completions..."
    $python_user_base/bin/poetry completions zsh > $ZCOMPDIR/_poetry
}

# Update global npm packages
function dotfiles-node {
    if [[ ! -w $HOMEBREW_BASE/bin ]]; then
        log "Skipping node update (no write permissions)"
        return
    fi

    local node_path=$1
    if [[ -z $node_path ]]; then
        log "Updating global node packages..."
        node_path=$HOMEBREW_BASE/bin
    fi

    # if a node_path was provided, the function was called from another
    # function, so don't print the top-level message
    if [[ ! -x $node_path/npm ]]; then
        err "No npm executable"
        return
    fi

    # get list of outdated global packages
    local mods=($($node_path/npm --registry=https://registry.npmjs.org outdated --location=global --parseable))
    for mod in $mods; do
        # extract current and latest fields
        array=(${(@s/:/)mod})
        currentPkg=$array[3]
        latestPkg=$array[4]

        # extract current and latest versions, minus any prerelease tags
        currentVerParts=(${(@s/@/)currentPkg})
        currentVer=$currentVerParts[2]
        latestVerParts=(${(@s/@/)latestPkg})
        latestVer=$latestVerParts[2]

        if [[ $latestVer == 'linked' ]]; then
            logSub "Skipping $latestPkg"
            continue
        fi

        # read versions into arrays
        current=(${(@s/./)currentVer})
        latest=(${(@s/./)latestVer})

        # if latest is newer than current, install latest
        if (( latest[1] > current[1] )) || {
            (( latest[1] == current[1] )) &&
            (( latest[2] > current[2] )) || {
            (( latest[1] == current[1] )) &&
            (( latest[2] == current[2] )) &&
            (( latest[3] > current[3] ));
                    };
                }; then
            $node_path/npm install --registry=https://registry.npmjs.org --progress=false --location=global $latestPkg > /dev/null
            logSub "Installed $latestPkg"
        fi
    done
}

# Update tmux plugins
function dotfiles-tmux {
    log "Updating tmux plugins..."

    if [[ -z $TMUX_PLUGIN_MANAGER_PATH ]]; then
        err "TMUX_PLUGIN_MANAGER_PATH not defined"
        return
    fi

    if [[ -d $TMUX_PLUGIN_MANAGER_PATH/tpm ]]; then
        $TMUX_PLUGIN_MANAGER_PATH/tpm/bin/install_plugins 2>&1 > /dev/null
    fi

    if [[ -d $TMUX_PLUGIN_MANAGER_PATH ]]; then
        cd $TMUX_PLUGIN_MANAGER_PATH
        for plugin in *; do
            cd $plugin
            head=$(git rev-parse HEAD)
            git pull -q --recurse-submodules
            git submodule update --remote -q
            if [[ $(git rev-parse HEAD) != $head ]]; then
                logSub "Updated $plugin"
            fi
            cd ..
        done
    fi
}

# Update vim plugins
function dotfiles-vim {
    log "Updating vim plugins..."

    if [[ -z "$SSH_CONNECTION" ]]; then
        nvim --headless -c ':Lazy! sync' -c 'quitall' 2>&1 > /dev/null
    else
        nvim --headless -c ':Lazy! restore' -c 'quitall' 2>&1 > /dev/null
    fi

    nvim --headless -c 'lua require("user.plugins.treesitter").install_parsers()' -c 'quitall' 2>&1 > /dev/null
}

cd $HOME

local help

zparseopts -D -E h=help -help=help

if [[ -n $help ]]; then
    echo 'usage: dotfiles [-h | --help | <group>]'
    echo
    echo 'Update local environment. All groups are updated by default.'
    echo
    echo 'Options:'
    echo '    -h, --help     Show this help message'
    echo '    <group>        A group to update'
    echo
    echo 'Available groups:'
    echo '    bat            Rebuild bat theme and filetype cache'
    echo '    brew           Update brew packages, install defaults'
    echo '    home           Update dotfiles and home directories, fixup terminfo database'
    echo '    mas            Update Mac App Store packages'
    echo '    node           Update global node packages, install defaults'
    echo '    python         Update global python packages, install defaults'
    echo '    tmux           Update tpm packages'
    echo '    vim            Update vim plugins'
    echo '    zsh            Update zsh plugins'
    exit 0
fi

if [[ $1 == -* ]]; then
    echo "Unknown option $1"
    exit 1
fi

if [[ -n $1 ]]; then
    dotfiles-$1
else
    dotfiles-home
    dotfiles-brew
    dotfiles-zsh
    dotfiles-python
    dotfiles-node
    dotfiles-tmux
    dotfiles-vim
    dotfiles-bat
fi

log "Done"
