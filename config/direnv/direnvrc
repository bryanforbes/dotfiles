use_asdf-plugins() {
  for spec in $@; do
    local plugin=${spec%@*}
    local version=${spec#*@}

    asdf list $plugin &> /dev/null

    if [[ $? -ne 0 ]]; then
      log_error "Plugin $plugin is not installed"
      exit 1
    fi

    local plugin_upper=$(printf "%s\\n" "$plugin" | tr '[:lower:]-' '[:upper:]_')
    eval "export ASDF_${plugin_upper}_VERSION=$version"

    asdf current $plugin &> /dev/null

    if [[ $? -ne 0 ]]; then
      asdf install $plugin $version
    fi
  done

  use_asdf
}

layout_poetry() {
  if [[ ! -f pyproject.toml ]]; then
    log_error 'No pyproject.toml found. Use `poetry new` or `poetry init` to create one first.'
    return
  fi

  local VENV="$(poetry env info --path)"
  if [[ -z "$VENV" || ! -d "$VENV/bin" ]]; then
    log_error 'No poetry virtual environment found.  Use `poetry install` to create one first.'
    return
  fi

  export VIRTUAL_ENV="$VENV"
  export POETRY_ACTIVE=1
  PATH_add "$VIRTUAL_ENV/bin"
}

layout_python-venv() {
  local python=${1:-python3}
  [[ $# -gt 0 ]] && shift
  unset PYTHONHOME
  if [[ -n $VIRTUAL_ENV ]]; then
    VIRTUAL_ENV=$(expand_path "${VIRTUAL_ENV}")
  else
    local python_version
    python_version=$("$python" -c "import platform; print(platform.python_version())")
    if [[ -z $python_version ]]; then
      log_error "Could not detect Python version"
      return 1
    fi
    VIRTUAL_ENV=$PWD/.direnv/python-venv-$python_version
  fi
  export VIRTUAL_ENV
  if [[ ! -d $VIRTUAL_ENV ]]; then
    log_status "no venv found; creating $VIRTUAL_ENV"
    "$python" -m venv "$VIRTUAL_ENV"
  fi

  PATH_add "${VIRTUAL_ENV}/bin"
}
